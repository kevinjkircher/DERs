import pandas as pd

def import_weather(file_name, t_span):
    """
    importWeather imports and processes weather data from a CSV file
    generated by OikoLab.

    Input:
      fileName, the name of the OikoLab CSV weather file.
      t, the datetime span.

    Output:
      temperature, the outdoor temperature in C
      totalHorizontal, the total solar shortwave irradiance on a horizontal surface in kW/m^2
      beamNormal, the beam solar shortwave irradiance on a normal surface in kW/m^2
      diffuseHorizontal, the diffuse solar shortwave irradiance on a horizontal surface in kW/m^2
      offsetGMT, (local time) - (Greenwich mean time) in hours
    """

    # import raw data
    weather_data = pd.read_csv(file_name)

    # extract data and convert units
    weather_data['timestamp'] = pd.to_datetime(
        weather_data.iloc[:, 0], format='%m/%d/%y %H:%M', errors='coerce'
    )

    # Fix year only if it's before 2000 to avoid overflow issues
    mask = weather_data['timestamp'].dt.year < 2000
    weather_data.loc[mask, 'timestamp'] = weather_data.loc[mask, 'timestamp'].apply(
        lambda x: x.replace(year=x.year + 2000)
    )

    # convert UTC to local time
    offsetGMT = weather_data.iloc[:, 4].values
    weather_data['timestamp'] += pd.to_timedelta(offsetGMT, unit='h')

    # set timestamp as index
    weather_data.set_index('timestamp', inplace=True)

    # extract data and convert units
    temperature = weather_data.iloc[:, 5].values  # outdoor air temperature, C
    total_horizontal = weather_data.iloc[:, 6].values / 1000  # total horizontal shortwave irradiance, kW/m^2
    beam_normal = weather_data.iloc[:, 7].values / 1000  # beam normal shortwave irradiance, kW/m^2
    diffuse_horizontal = weather_data.iloc[:, 8].values / 1000  # diffuse horizontal shortwave irradiance, kW/m^2

    # fill any missing data
    weather_data.interpolate(method='linear', inplace=True)

    # pack the data into a timetable object
    weather_data = weather_data.reindex(t_span).interpolate(method='linear')

    # retime to the desired time steps
    temperature = weather_data.iloc[:, 5].values
    total_horizontal = weather_data.iloc[:, 6].values / 1000
    beam_normal = weather_data.iloc[:, 7].values / 1000
    diffuse_horizontal = weather_data.iloc[:, 8].values / 1000
    offsetGMT = weather_data.iloc[:, 4].values

    # fill any missing data again
    temperature = pd.Series(temperature).interpolate(method='linear').values
    total_horizontal = pd.Series(total_horizontal).interpolate(method='linear').values
    beam_normal = pd.Series(beam_normal).interpolate(method='linear').values
    diffuse_horizontal = pd.Series(diffuse_horizontal).interpolate(method='linear').values
    offsetGMT = pd.Series(offsetGMT).interpolate(method='linear').values

    return temperature, total_horizontal
